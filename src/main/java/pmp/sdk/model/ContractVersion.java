/*
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pmp.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import pmp.sdk.model.ContractAttachment;
import pmp.sdk.model.ContractCover;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * ContractVersion
 */
@JsonPropertyOrder({
  ContractVersion.JSON_PROPERTY_EFFECTIVE_DATE,
  ContractVersion.JSON_PROPERTY_EXPIRATION_DATE,
  ContractVersion.JSON_PROPERTY_ITEM_IDENTIFIER,
  ContractVersion.JSON_PROPERTY_ANCESTOR_ITEM_IDENTIFIER,
  ContractVersion.JSON_PROPERTY_PURGE,
  ContractVersion.JSON_PROPERTY_RETIRED,
  ContractVersion.JSON_PROPERTY_VERSION_NUMBER,
  ContractVersion.JSON_PROPERTY_HIDDEN_CONTRACT,
  ContractVersion.JSON_PROPERTY_EXISTENCE,
  ContractVersion.JSON_PROPERTY_CONTRACT_ATTACHMENTS,
  ContractVersion.JSON_PROPERTY_CONTRACT_COVERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-07-30T00:50:45.283009+02:00[Europe/Warsaw]")
public class ContractVersion {
  public static final String JSON_PROPERTY_EFFECTIVE_DATE = "effectiveDate";
  private String effectiveDate;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expirationDate";
  private JsonNullable<String> expirationDate = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ITEM_IDENTIFIER = "itemIdentifier";
  private String itemIdentifier;

  public static final String JSON_PROPERTY_ANCESTOR_ITEM_IDENTIFIER = "ancestorItemIdentifier";
  private JsonNullable<String> ancestorItemIdentifier = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PURGE = "purge";
  private Boolean purge;

  public static final String JSON_PROPERTY_RETIRED = "retired";
  private Boolean retired;

  public static final String JSON_PROPERTY_VERSION_NUMBER = "versionNumber";
  private Integer versionNumber;

  public static final String JSON_PROPERTY_HIDDEN_CONTRACT = "hiddenContract";
  private Boolean hiddenContract;

  /**
   * Gets or Sets existence
   */
  public enum ExistenceEnum {
    REQUIRED("Required"),
    
    SUGGESTED("Suggested"),
    
    ELECTABLE("Electable");

    private String value;

    ExistenceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExistenceEnum fromValue(String value) {
      for (ExistenceEnum b : ExistenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EXISTENCE = "existence";
  private ExistenceEnum existence;

  public static final String JSON_PROPERTY_CONTRACT_ATTACHMENTS = "contractAttachments";
  private List<ContractAttachment> contractAttachments = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTRACT_COVERS = "contractCovers";
  private List<ContractCover> contractCovers = new ArrayList<>();


  public ContractVersion effectiveDate(String effectiveDate) {
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Get effectiveDate
   * @return effectiveDate
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public ContractVersion expirationDate(String expirationDate) {
    this.expirationDate = JsonNullable.<String>of(expirationDate);
    
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getExpirationDate() {
        return expirationDate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public JsonNullable<String> getExpirationDate_JsonNullable() {
    return expirationDate;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  public void setExpirationDate_JsonNullable(JsonNullable<String> expirationDate) {
    this.expirationDate = expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = JsonNullable.<String>of(expirationDate);
  }


  public ContractVersion itemIdentifier(String itemIdentifier) {
    
    this.itemIdentifier = itemIdentifier;
    return this;
  }

   /**
   * Get itemIdentifier
   * @return itemIdentifier
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ITEM_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getItemIdentifier() {
    return itemIdentifier;
  }


  public void setItemIdentifier(String itemIdentifier) {
    this.itemIdentifier = itemIdentifier;
  }


  public ContractVersion ancestorItemIdentifier(String ancestorItemIdentifier) {
    this.ancestorItemIdentifier = JsonNullable.<String>of(ancestorItemIdentifier);
    
    return this;
  }

   /**
   * Get ancestorItemIdentifier
   * @return ancestorItemIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public String getAncestorItemIdentifier() {
        return ancestorItemIdentifier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANCESTOR_ITEM_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public JsonNullable<String> getAncestorItemIdentifier_JsonNullable() {
    return ancestorItemIdentifier;
  }
  
  @JsonProperty(JSON_PROPERTY_ANCESTOR_ITEM_IDENTIFIER)
  public void setAncestorItemIdentifier_JsonNullable(JsonNullable<String> ancestorItemIdentifier) {
    this.ancestorItemIdentifier = ancestorItemIdentifier;
  }

  public void setAncestorItemIdentifier(String ancestorItemIdentifier) {
    this.ancestorItemIdentifier = JsonNullable.<String>of(ancestorItemIdentifier);
  }


  public ContractVersion purge(Boolean purge) {
    
    this.purge = purge;
    return this;
  }

   /**
   * Get purge
   * @return purge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PURGE)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public Boolean getPurge() {
    return purge;
  }


  public void setPurge(Boolean purge) {
    this.purge = purge;
  }


  public ContractVersion retired(Boolean retired) {
    
    this.retired = retired;
    return this;
  }

   /**
   * Get retired
   * @return retired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RETIRED)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public Boolean getRetired() {
    return retired;
  }


  public void setRetired(Boolean retired) {
    this.retired = retired;
  }


  public ContractVersion versionNumber(Integer versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * minimum: -2147483648
   * maximum: 2147483647
   * @return versionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public Integer getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }


  public ContractVersion hiddenContract(Boolean hiddenContract) {
    
    this.hiddenContract = hiddenContract;
    return this;
  }

   /**
   * Get hiddenContract
   * @return hiddenContract
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HIDDEN_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public Boolean getHiddenContract() {
    return hiddenContract;
  }


  public void setHiddenContract(Boolean hiddenContract) {
    this.hiddenContract = hiddenContract;
  }


  public ContractVersion existence(ExistenceEnum existence) {
    
    this.existence = existence;
    return this;
  }

   /**
   * Get existence
   * @return existence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXISTENCE)
  @JsonInclude(value = JsonInclude.Include.NON_DEFAULT)

  public ExistenceEnum getExistence() {
    return existence;
  }


  public void setExistence(ExistenceEnum existence) {
    this.existence = existence;
  }


  public ContractVersion contractAttachments(List<ContractAttachment> contractAttachments) {
    
    this.contractAttachments = contractAttachments;
    return this;
  }

  public ContractVersion addContractAttachmentsItem(ContractAttachment contractAttachmentsItem) {
    this.contractAttachments.add(contractAttachmentsItem);
    return this;
  }

   /**
   * Get contractAttachments
   * @return contractAttachments
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTRACT_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ContractAttachment> getContractAttachments() {
    return contractAttachments;
  }


  public void setContractAttachments(List<ContractAttachment> contractAttachments) {
    this.contractAttachments = contractAttachments;
  }


  public ContractVersion contractCovers(List<ContractCover> contractCovers) {
    
    this.contractCovers = contractCovers;
    return this;
  }

  public ContractVersion addContractCoversItem(ContractCover contractCoversItem) {
    this.contractCovers.add(contractCoversItem);
    return this;
  }

   /**
   * Get contractCovers
   * @return contractCovers
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONTRACT_COVERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ContractCover> getContractCovers() {
    return contractCovers;
  }


  public void setContractCovers(List<ContractCover> contractCovers) {
    this.contractCovers = contractCovers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractVersion contractVersion = (ContractVersion) o;
    return Objects.equals(this.effectiveDate, contractVersion.effectiveDate) &&
        Objects.equals(this.expirationDate, contractVersion.expirationDate) &&
        Objects.equals(this.itemIdentifier, contractVersion.itemIdentifier) &&
        Objects.equals(this.ancestorItemIdentifier, contractVersion.ancestorItemIdentifier) &&
        Objects.equals(this.purge, contractVersion.purge) &&
        Objects.equals(this.retired, contractVersion.retired) &&
        Objects.equals(this.versionNumber, contractVersion.versionNumber) &&
        Objects.equals(this.hiddenContract, contractVersion.hiddenContract) &&
        Objects.equals(this.existence, contractVersion.existence) &&
        Objects.equals(this.contractAttachments, contractVersion.contractAttachments) &&
        Objects.equals(this.contractCovers, contractVersion.contractCovers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveDate, expirationDate, itemIdentifier, ancestorItemIdentifier, purge, retired, versionNumber, hiddenContract, existence, contractAttachments, contractCovers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractVersion {\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    itemIdentifier: ").append(toIndentedString(itemIdentifier)).append("\n");
    sb.append("    ancestorItemIdentifier: ").append(toIndentedString(ancestorItemIdentifier)).append("\n");
    sb.append("    purge: ").append(toIndentedString(purge)).append("\n");
    sb.append("    retired: ").append(toIndentedString(retired)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    hiddenContract: ").append(toIndentedString(hiddenContract)).append("\n");
    sb.append("    existence: ").append(toIndentedString(existence)).append("\n");
    sb.append("    contractAttachments: ").append(toIndentedString(contractAttachments)).append("\n");
    sb.append("    contractCovers: ").append(toIndentedString(contractCovers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

